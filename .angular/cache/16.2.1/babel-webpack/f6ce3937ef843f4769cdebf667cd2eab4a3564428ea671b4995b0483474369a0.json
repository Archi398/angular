{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizService {\n  constructor(http) {\n    this.http = http;\n    this.quizContent = [];\n    this.playerAnswers = [];\n    this.score = 0;\n    this.isQuizFinished = false;\n    this.playerName = '';\n    this.categid = 0;\n  }\n  checkAnswers() {\n    this.score = 0;\n    for (let i = 0; i < this.playerAnswers.length; i++) {\n      const question = this.quizContent.find(q => q.id === this.playerAnswers[i].questionId);\n      if (!question) continue;\n      for (let j = 0; j < question.answers.length; j++) {\n        const currentAnswer = question.answers[j];\n        if (currentAnswer.isCorrect && this.playerAnswers[i].answer === currentAnswer.answerLabel) {\n          this.score += 1;\n          break;\n        }\n      }\n    }\n    this.isQuizFinished = true;\n  }\n  addAnswer(answer, questionId) {\n    const isAnswered = this.playerAnswers.find(a => a.questionId === questionId);\n    if (isAnswered) {\n      isAnswered.answer = answer;\n      return;\n    }\n    this.playerAnswers.push({\n      questionId,\n      answer\n    });\n  }\n  getQuizContent(categid) {\n    this.http.get(`http://localhost:3000/questions`).subscribe(questions => {\n      for (const question of questions) {\n        if (question.categid == categid) {\n          this.http.get(`http://localhost:3000/answers?questionId=${question.id}`).subscribe(answers => {\n            this.quizContent.push({\n              id: question.id,\n              question: question.questionLabel,\n              answers,\n              categid: question.categid\n            });\n          });\n        }\n      }\n    });\n  }\n  resetQuiz() {\n    this.quizContent = [];\n    this.playerAnswers = [];\n    this.score = 0;\n    this.isQuizFinished = false;\n  }\n}\n_class = QuizService;\n_class.ɵfac = function QuizService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["QuizService","constructor","http","quizContent","playerAnswers","score","isQuizFinished","playerName","categid","checkAnswers","i","length","question","find","q","id","questionId","j","answers","currentAnswer","isCorrect","answer","answerLabel","addAnswer","isAnswered","a","push","getQuizContent","get","subscribe","questions","questionLabel","resetQuiz","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/efreiarchi/Desktop/projet angular/angular-prof/Untitled/src/app/shared/services/quiz.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuizService {\n  quizContent: any[] = [];\n  playerAnswers: { questionId: number; answer: string }[] = [];\n  score = 0;\n  isQuizFinished = false;\n  playerName: string = '';\n  categid = 0;\n\n  constructor(private http: HttpClient) { }\n\n  checkAnswers() {\n    this.score = 0;\n    for (let i = 0; i < this.playerAnswers.length; i++) {\n      const question = this.quizContent.find((q) => q.id === this.playerAnswers[i].questionId);\n      if (!question) continue;\n      for (let j = 0; j < question.answers.length; j++) {\n        const currentAnswer = question.answers[j];\n        if (currentAnswer.isCorrect && this.playerAnswers[i].answer === currentAnswer.answerLabel) {\n          this.score += 1;\n          break;\n        }\n      }\n    }\n    this.isQuizFinished = true;\n  }\n\n  addAnswer(answer: string, questionId: number) {\n    const isAnswered = this.playerAnswers.find((a) => a.questionId === questionId);\n    if (isAnswered) {\n      isAnswered.answer = answer;\n      return;\n    }\n    this.playerAnswers.push({ questionId, answer });\n  }\n\n  getQuizContent(categid: any) {\n    this.http.get(`http://localhost:3000/questions`).subscribe((questions: any) => {\n      for (const question of questions) {\n        if (question.categid == categid) {\n          this.http.get(`http://localhost:3000/answers?questionId=${question.id}`).subscribe((answers: any) => {\n            this.quizContent.push({\n              id: question.id,\n              question: question.questionLabel,\n              answers,\n              categid: question.categid\n            });\n          });\n        }\n      }\n    });\n  }\n\n  resetQuiz() {\n    this.quizContent = [];\n    this.playerAnswers = [];\n    this.score = 0;\n    this.isQuizFinished = false;\n  }\n}\n"],"mappings":";;;AAMA,OAAM,MAAOA,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPxB,KAAAC,WAAW,GAAU,EAAE;IACvB,KAAAC,aAAa,GAA6C,EAAE;IAC5D,KAAAC,KAAK,GAAG,CAAC;IACT,KAAAC,cAAc,GAAG,KAAK;IACtB,KAAAC,UAAU,GAAW,EAAE;IACvB,KAAAC,OAAO,GAAG,CAAC;EAE6B;EAExCC,YAAYA,CAAA;IACV,IAAI,CAACJ,KAAK,GAAG,CAAC;IACd,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACN,aAAa,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MAClD,MAAME,QAAQ,GAAG,IAAI,CAACT,WAAW,CAACU,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAK,IAAI,CAACX,aAAa,CAACM,CAAC,CAAC,CAACM,UAAU,CAAC;MACxF,IAAI,CAACJ,QAAQ,EAAE;MACf,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,OAAO,CAACP,MAAM,EAAEM,CAAC,EAAE,EAAE;QAChD,MAAME,aAAa,GAAGP,QAAQ,CAACM,OAAO,CAACD,CAAC,CAAC;QACzC,IAAIE,aAAa,CAACC,SAAS,IAAI,IAAI,CAAChB,aAAa,CAACM,CAAC,CAAC,CAACW,MAAM,KAAKF,aAAa,CAACG,WAAW,EAAE;UACzF,IAAI,CAACjB,KAAK,IAAI,CAAC;UACf;;;;IAIN,IAAI,CAACC,cAAc,GAAG,IAAI;EAC5B;EAEAiB,SAASA,CAACF,MAAc,EAAEL,UAAkB;IAC1C,MAAMQ,UAAU,GAAG,IAAI,CAACpB,aAAa,CAACS,IAAI,CAAEY,CAAC,IAAKA,CAAC,CAACT,UAAU,KAAKA,UAAU,CAAC;IAC9E,IAAIQ,UAAU,EAAE;MACdA,UAAU,CAACH,MAAM,GAAGA,MAAM;MAC1B;;IAEF,IAAI,CAACjB,aAAa,CAACsB,IAAI,CAAC;MAAEV,UAAU;MAAEK;IAAM,CAAE,CAAC;EACjD;EAEAM,cAAcA,CAACnB,OAAY;IACzB,IAAI,CAACN,IAAI,CAAC0B,GAAG,CAAC,iCAAiC,CAAC,CAACC,SAAS,CAAEC,SAAc,IAAI;MAC5E,KAAK,MAAMlB,QAAQ,IAAIkB,SAAS,EAAE;QAChC,IAAIlB,QAAQ,CAACJ,OAAO,IAAIA,OAAO,EAAE;UAC/B,IAAI,CAACN,IAAI,CAAC0B,GAAG,CAAC,4CAA4ChB,QAAQ,CAACG,EAAE,EAAE,CAAC,CAACc,SAAS,CAAEX,OAAY,IAAI;YAClG,IAAI,CAACf,WAAW,CAACuB,IAAI,CAAC;cACpBX,EAAE,EAAEH,QAAQ,CAACG,EAAE;cACfH,QAAQ,EAAEA,QAAQ,CAACmB,aAAa;cAChCb,OAAO;cACPV,OAAO,EAAEI,QAAQ,CAACJ;aACnB,CAAC;UACJ,CAAC,CAAC;;;IAGR,CAAC,CAAC;EACJ;EAEAwB,SAASA,CAAA;IACP,IAAI,CAAC7B,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,cAAc,GAAG,KAAK;EAC7B;;SAzDWN,WAAW;;mBAAXA,MAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXpC,MAAW;EAAAqC,OAAA,EAAXrC,MAAW,CAAAsC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}